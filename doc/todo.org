* features

** for all loops
*** replacing, quantized or not
**** including re sampling with FX
*** double length
**** or multiply by integer
*** song sections
**** go to 'future mode', select actions (rec, play) per loop
**** on next section-start-timer: apply
*** loop trigger hold-button functionality:
**** if playing: stop
***** if button held: start again on release, else remain  stopped
**** if stopped: play
***** if button held: stop playing on release, else remain playing
*** dynamically set start position, independant from length
**** after you record a loop, you decide you want to play it not from bar 1 to 4
**** but from bar 0.5 to bar 4.5, or from -0.5 to 3.5.
*** instant sampling (for playing chords or auto-slicing beats)
**** use find-transient around

*** find-transient-around [centre range]:
**** look 'range' ms before and after 'centre' for a transient.

** for master loop
*** dynamic realign:
**** if the loop is recorded with an upbeat, when restarting, it would normally start in the middle.
**** This is not musically correct so we set the sync point to the 1st beat of the loop
***** use  find-transient-around
***** also needed to sync lfo's and such.


* sound fx / presets

** 3d morph
** organize by genre -> sub-genre
** organize by timbre similarity (pd lib)

* design principles:

** functional to enable undo
** reactive
** immutable: record all audio, actions
** separate gui from engine via osc
*** record all osc and audio
** verbs for functions, nouns for defs


* minimal state needed:

** config file
*** default path
** static (cli arguments?)
*** nr inputs (dry signal)
*** nr outputs
*** max loop length
** global
*** input audio (on disk)
*** input osc (on disk)
*** recording path
*** ntp now (= now)
*** nr of loops
*** array of loops
*** selected loop
*** tempo over time (can change at any point, not just on downbeat)
*** downbeat (for phase)
*** chord ?
** per loop (in RAM)
*** dry audio
*** wet audio
*** settings/automation OSC
*** FX chain
*** source audio array
**** keep track of which buffer sample comes from which source sample
**** needed for undo and dynamically changing where the 1 is
*** length
** disk state (for saving)
*** all of static
*** all of per loop

* user interface:
** ui input elements
*** global
**** tap tempo
    - future mode
*** per loop
**** start/stop
****
** visual ui output elements
*** show loop:
**** linear, so we can show grid
**** waveform plus overlaid bar for time
**** bar height is VU.
**** with dynamic length:
***** starts at say 100 ms per loop and when it's full it scales time.
** when recording with upbeat: show upbeat as if recorded at end of loop
** visualize what loop length would be if key would be pressed now
*** show measures overlayed on waveform with colours representing accents:
**** beat and bar
**** section, meaning:
***** when 'now' is between bar 1 and 1.5 we make a one bar loop
***** at 1.5 we make 2 bars: bar 1 accent
***** at 2.5 we make 3 bars: bar 1 accent
***** at 3.5 we make 4 bars: bar 1 and 3 accents
***** at 5 -> looplength 6, accents 1 4
***** at 7 ll 8 ac 1 (3 half accented) 5 (7)
***** at 10 ll 12 ac 1 (3) 5 (7) 9 (11)
***** or ac 1 (4) 7 (10)
***** at 14 ll 16 ac 1 (3) 5 (7) 9 (11) 13 (15)

* workflow
** master loop:
*** two possible workflows for recording the first loop: free-tempo and tap-tempo
**** free tempo:
***** when there is no bpm yet, we have a normal looper.
*** then when we are recording, two things can stop it
**** pressing the same key:
***** wait for next switching point
****** stop recording and start looping
**** when pressing another key: stop recording one loop, start looping, start recording slave loop.
** slave loop:
*** very similar to recording a master loop with known tempo.
**** set loop start at first sound after start rec

* modes / states
maybe use https://github.com/ztellman/automat

** nothing playing or recording
*** no tempo
**** hit loop-button
***** start recording first loop
**** hit tap-tempo
***** count in (aka tap tempo)
****** at 2nd tap button starts flashing in tempo
****** set loop start at first sound after (or slightly before) first tap
****** set loop sync point (aka beat 1) to first beat where there was no tap
******* (find-transient-around phantom-beat (measure-to-ms 1/16))
****** start tempo tracking within x % of tapped tempo
****** visualize what loop length would be if key would be pressed now
*** have tempo
** recording first loop
** something playing
*** no tempo
*** have tempo
**** keep playing
**** record new
**** overdub
**** replace
**** replace and extend
***** replaces as normal, but extends the loop when the end is reached
**** cut-mode
***** from freewheeling: play the loops like a keyboard
****** don't retrigger, loops stay synced
****** loop trigger hold-button functionality (see features)

* implementation

** do/undo/redo loop change
*** examples
**** new loop ends recording
**** overdub / replace
**** automation change
*** do
**** add event data to state-list (or state tree)
***** loop nr and channel nrs within it
****** what do we overwrite
******* this is always one of the nr-loops buffers. one or more of:
******** dry audio
******** FX audio
******** osc  automation data
***** start and end in loop
****** where do we overwrite
***** start and end in source
***** array of prev sources
****** each loop has a time-stamped list of where in the source the data came from
******* example
******** sample 0 to 99 are from source sample 42 trough 141
******** sample 100 to 200 are from source sample 342 trough 441
******** and so on
***** processed-time-stamp
****** when will we overwrite
***** history-nr
****** so we know where to go in the list/tree for the next undo orredo
**** overwrite audio/osc in buffer
*** undo
**** get current history-nr
**** get loop nr, start and end, prev-sources-array
**** overwrite audio/osc in buffer
**** append new history-nr to list/tree
***** that would be the number of the previous one.
